package orbit

import "math"

// import (
//
//	"math"
//
// )
const (
	EarthRadius = 6371000.0
	earthOmega  = 7.2921159e-5
)

// // GuidanceUpdatePosition –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ä–∞–∫–µ—Ç—ã –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
// func GuidanceUpdatePosition(
//
//	lat, lon float64, // —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≥—Ä–∞–¥—É—Å—ã)
//	velocity float64, // –ø–æ–ª–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∫–µ—Ç—ã (–º/—Å)
//	pitch float64, // —É–≥–æ–ª –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É (–≥—Ä–∞–¥—É—Å—ã), 90 = –≤–≤–µ—Ä—Ö
//	heading float64, // –∞–∑–∏–º—É—Ç (–≥—Ä–∞–¥—É—Å—ã), 90 = –≤–æ—Å—Ç–æ–∫
//
//	) (float64, float64) {
//		latRad := lat * math.Pi / 180
//		lonRad := lon * math.Pi / 180
//		headingRad := heading * math.Pi / 180
//		pitchRad := pitch * math.Pi / 180
//
//		// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏)
//		horizontalVelocity := velocity * math.Cos(pitchRad)
//
//		// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ñ–µ—Ä–µ)
//		d := horizontalVelocity // –º/—Å
//
//		// –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–æ—Ç—É
//		newLat := math.Asin(
//			math.Sin(latRad)*math.Cos(d/EarthRadius) +
//				math.Cos(latRad)*math.Sin(d/EarthRadius)*math.Cos(headingRad),
//		)
//
//		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–≥–æ—Ç—É
//		newLon := lonRad + math.Atan2(
//			math.Sin(headingRad)*math.Sin(d/EarthRadius)*math.Cos(latRad),
//			math.Cos(d/EarthRadius)-math.Sin(latRad)*math.Sin(newLat),
//		)
//
//		return newLat * 180 / math.Pi, newLon * 180 / math.Pi
//	}
//
// var currentPitch = 90.0 // –≥–ª–æ–±–∞–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π pitch, –º–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
//
// func ComputePitchSmart(
//
//	altitude float64,
//	vVertical float64,
//	vHorizontal float64,
//	aVertical float64,
//	aHorizontal float64,
//	mission OrbitType,
//
//	) float64 {
//		startAltitude, endAltitude, targetPitch := mission.GetPitchTurnParams()
//		targetAlt := mission.GetTargetOrbitAltitude()
//		requiredOrbitalV := 7670.0
//		initialPitch := 90.0
//
//		// –§–∞–∑–∞ —Å—Ç–∞—Ä—Ç–∞: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤–∑–ª—ë—Ç
//		if altitude <= startAltitude {
//			currentPitch = initialPitch
//			return currentPitch
//		}
//
//		// –§–∞–∑–∞ –≥—Ä–∞–≤–∏—Ç–∏-—Ç–µ—Ä–Ω–∞: –æ—Ç 90 –∫ —Ü–µ–ª–µ–≤–æ–º—É —É–≥–ª—É
//		if altitude < endAltitude {
//			t := (altitude - startAltitude) / (endAltitude - startAltitude)
//			eased := 0.5 * (1 - math.Cos(t*math.Pi))
//			currentPitch = initialPitch*(1-eased) + targetPitch*eased
//			return currentPitch
//		}
//
//		// === –û—Ä–±–∏—Ç–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ ===
//
//		// –ü—Ä–æ–≥–Ω–æ–∑ –∞–ø–æ–≥–µ—è (–ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)
//		gravity := 9.81 // –∏–ª–∏ —Ç–≤–æ–π calcGravityAtAltitude(altitude)
//		predictedApogee := altitude + (vVertical*vVertical)/(2*gravity)
//
//		// –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
//		speedRatio := math.Min(vHorizontal/requiredOrbitalV, 1.0)
//		apogeeRatio := predictedApogee / targetAlt
//
//		// –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á—ë—Ç pitch
//		target := targetPitch
//
//		// üîª –ü–µ—Ä–µ–ª—ë—Ç –ø–æ –∞–ø–æ–≥–µ—é ‚Äî –æ–ø—É—Å–∫–∞–µ–º –Ω–æ—Å
//		if apogeeRatio > 1.05 {
//			target = -5.0 // "–Ω—ã—Ä–Ω—É—Ç—å", —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—Ä–∞—Å—ã–≤–∞–ª–æ –≤—ã—à–µ
//		}
//
//		// üîº –ù–µ–¥–æ–ª—ë—Ç –ø–æ –∞–ø–æ–≥–µ—é ‚Äî —á—É—Ç—å –≤—ã—à–µ
//		if apogeeRatio < 0.95 && altitude > endAltitude {
//			target = 20.0
//		}
//
//		// üß† –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ, –ø–ª–æ—Ö–æ–º –∞–ø–æ–≥–µ–µ ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º —á—É—Ç—å-—á—É—Ç—å
//		if speedRatio > 0.8 && apogeeRatio < 1.0 {
//			target = 10.0
//		}
//
//		// üõ¨ –ï—Å–ª–∏ –ø–æ—à—ë–ª —Å–ø–∞–¥ (–Ω–∞—á–∞–ª–æ –ø–∞–¥–µ–Ω–∏—è)
//		if vVertical < -20 {
//			target = -10.0
//		}
//
//		// ‚õî –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π
//		if altitude > targetAlt*1.5 {
//			target = -30.0
//		}
//
//		// === –ü–ª–∞–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–∞–ª—å—Ñ–∞-—Ñ–∏–ª—å—Ç—Ä)
//		alpha := 0.05
//		currentPitch = (1-alpha)*currentPitch + alpha*target
//
//		return currentPitch // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
//	}
//
// var CurrentThrottle float64 = 1.0 // –º–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ AutopilotState
//
// func ComputeThrottle(
//
//	vHorizontal, aHorizontal float64,
//	vVertical, aVertical float64,
//	altitude, pitchDeg float64,
//	twr float64,
//	requiredOrbitalV, maxThrottle float64,
//
//	) float64 {
//		targetThrottle := maxThrottle
//
//		// --- –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–´–ô –î–ï–§–ò–¶–ò–¢ ---
//		speedDeficit := math.Max(0.0, requiredOrbitalV-vHorizontal) / requiredOrbitalV
//		pitchRad := pitchDeg * math.Pi / 180.0
//		angleFactor := math.Pow(math.Cos(pitchRad), 0.5) // –í–ª–∏—è–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—è–≥–∏
//		correctionH := speedDeficit * angleFactor
//
//		// --- –í–ï–†–¢–ò–ö–ê–õ–¨–ù–´–ô –§–ê–ö–¢–û–† ---
//		verticalFactor := 1.0
//		if vVertical > 0 {
//			if vVertical > 500 {
//				verticalFactor = 0.5
//			} else {
//				verticalFactor = 1.0 - (vVertical/1000.0)*0.5
//			}
//		}
//		// –î–æ–±–∞–≤–æ—á–Ω–∞—è —Ç—è–≥–∞ –ø—Ä–∏ —Å–ª–∞–±–æ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —É—Å–∫–æ—Ä–µ–Ω–∏–∏ –∏ –Ω–µ–¥–æ–±–æ—Ä–µ –≤—ã—Å–æ—Ç—ã
//		if vVertical < 300 && aVertical < 2.0 {
//			verticalFactor += 0.3
//		}
//
//		// --- –í–õ–ò–Ø–ù–ò–ï –í–´–°–û–¢–´ (—Å–≥–ª–∞–∂–µ–Ω–Ω–æ–µ) ---
//		altitudeFactor := 1.0 - math.Min((altitude-100_000)/250_000, 1.0)*0.2
//
//		// --- –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û–ï –£–°–ö–û–†–ï–ù–ò–ï (–Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –≤–±–æ–∫) ---
//		var aHFactor float64
//		if aHorizontal < 1.0 {
//			aHFactor = 1.2
//		} else if aHorizontal > 10.0 {
//			aHFactor = 0.8
//		} else {
//			scale := (aHorizontal - 1.0) / 9.0
//			aHFactor = 1.2 - scale*0.4
//		}
//
//		// --- –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø –¢–Ø–ì–ò ---
//		correction := 1.0 + correctionH + verticalFactor*0.5
//		correction = math.Min(1.5, correction) // –û–≥—Ä–∞–Ω–∏—á–∏–º —É—Å–∏–ª–µ–Ω–∏–µ
//		correction *= altitudeFactor * aHFactor
//
//		targetThrottle *= correction
//
//		// --- TWR-–ú–û–î–ï–†–ê–¶–ò–Ø (–º—è–≥–∫–∞—è) ---
//		targetTWR := 1.5
//		if twr > targetTWR {
//			scale := targetTWR / twr
//			targetThrottle *= scale
//		} else if twr < 1.0 {
//			targetThrottle = 1.0 // –ü–∞–¥–∞–µ–º ‚Äî –Ω–∞–¥–æ –≤ –ø–æ–ª
//		}
//
//		// --- –ü–õ–ê–í–ù–û–°–¢–¨ –†–ï–ê–ö–¶–ò–ò ---
//		// –ß–µ–º –±–ª–∏–∂–µ –∫ –æ—Ä–±–∏—Ç–µ ‚Äî —Ç–µ–º –º—è–≥—á–µ –º–µ–Ω—è–µ–º —Ç—è–≥—É
//		rateLimit := 0.02
//		if vHorizontal > 7000 {
//			rateLimit = 0.005
//		}
//
//		// –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
//		diff := targetThrottle - CurrentThrottle
//		if math.Abs(diff) < rateLimit {
//			CurrentThrottle = targetThrottle
//		} else if diff > 0 {
//			CurrentThrottle += rateLimit
//		} else {
//			CurrentThrottle -= rateLimit
//		}
//
//		// –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
//		return math.Max(0.0, math.Min(CurrentThrottle, maxThrottle))
//	}
func EarthRotationSpeedAtLatitude(latitude float64) float64 {
	const omega = 7.2921159e-5 // —Ä–∞–¥/—Å
	const radius = 6371000.0   // –º
	latRad := latitude * math.Pi / 180
	return omega * radius * math.Cos(latRad) // –≤ –º/—Å
}
