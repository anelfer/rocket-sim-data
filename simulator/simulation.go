package simulator

import (
	"fmt"
	"math"
	"math/rand"
	"rocketTelemetrySim/metrics"
	"time"
)

var rng = rand.New(rand.NewSource(time.Now().UnixNano()))

func RunSimulation() {
	dryMass := 250000.0
	totalMass := 549054.0
	fuelMass := totalMass - dryMass
	fuelBurnRate := 400.0
	velocity := 0.0
	altitude := 0.0
	gravity := 9.81
	area := math.Pi * math.Pow(1.83, 2)
	dragCoefficient := 0.5
	airDensitySeaLevel := 1.225

	engines := initEngines(9, 900000, 1.83)

	lowFuelThreshold := fuelMass * 0.1

	for altitude >= 0 {
		if fuelMass <= 0 {
			fuelMass = 0
			for i := range engines {
				if engines[i].Running {
					engines[i].Running = false
					fmt.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á—ë–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", i+1, altitude)
					balanceEngines(engines, i)
				}
			}
		}

		// –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ, —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏
		if fuelMass > 0 && fuelMass < lowFuelThreshold {
			for idx, engine := range engines {
				if engine.Running {
					chance := rand.Float64()
					if chance < 0.2 { // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è
						engines[idx].Running = false
						fmt.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –≤—ã—à–µ–ª –∏–∑ —Å—Ç—Ä–æ—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", idx+1, altitude)
						balanceEngines(engines, idx)
					} else if chance < 0.3 { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–∫–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç—è–≥–∏ (—Å—É—Ä–∂)
						surgeFactor := 1.5
						engines[idx].Thrust *= surgeFactor
						fmt.Printf("‚ö° –î–≤–∏–≥–∞—Ç–µ–ª—å %d –∏—Å–ø—ã—Ç–∞–ª —Ä–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ —Ç—è–≥–∏ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º, –Ω–æ–≤–∞—è —Ç—è–≥–∞: %.2f\n", idx+1, altitude, engines[idx].Thrust)
					} else if chance < 0.4 { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–∫–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç—è–≥–∏
						reductionFactor := 0.5
						engines[idx].Thrust *= reductionFactor
						fmt.Printf("‚ö†Ô∏è –î–≤–∏–≥–∞—Ç–µ–ª—å %d –∏—Å–ø—ã—Ç–∞–ª —Ä–µ–∑–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç—è–≥–∏ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º, –Ω–æ–≤–∞—è —Ç—è–≥–∞: %.2f\n", idx+1, altitude, engines[idx].Thrust)
					}
				}
			}
		}

		// –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Ç—è–≥—É –æ—Ç –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
		thrust := totalThrust(engines)
		airDensity := airDensitySeaLevel * math.Exp(-altitude/8500)
		drag := 0.5 * dragCoefficient * airDensity * velocity * velocity * area

		// –¢–µ–∫—É—â–∞—è –º–∞—Å—Å–∞ —Ä–∞–∫–µ—Ç—ã = —Å—É—Ö–∞—è –º–∞—Å—Å–∞ + –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —Ç–æ–ø–ª–∏–≤–æ
		currentMass := dryMass + fuelMass
		acceleration := (thrust - currentMass*gravity - drag) / currentMass
		velocity += acceleration
		altitude += velocity

		// –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
		running := runningEngines(engines)
		fuelConsumed := fuelBurnRate * float64(running)
		if fuelMass-fuelConsumed < 0 {
			fuelConsumed = fuelMass
		}
		fuelMass -= fuelConsumed

		chanceAccident := rand.Float64()
		if chanceAccident < 0.10 && runningEngines(engines) >= 7 {
			randomIndex := rand.Intn(len(engines))
			engines[randomIndex].Running = false
			fmt.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∞–≤–∞—Ä–∏–∏ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", randomIndex+1, altitude)
			balanceEngines(engines, randomIndex)
		}

		metrics.SendBasicMetrics(altitude, velocity, acceleration, currentMass, drag, airDensity, running)

		for idx, engine := range engines {
			engineID := fmt.Sprintf("%d", idx+1)
			if engine.Running {
				metrics.SetEngineThrust(engineID, engine.Thrust)
			} else {
				metrics.SetEngineThrust(engineID, 0)
			}
		}

		time.Sleep(1 * time.Second)
	}
}

func balanceEngines(engines []Engine, failedIdx int) {
	failedEngine := engines[failedIdx]

	// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –¥–ª—è —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Ç—è–≥–∏:
	// –î–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è ‚Äì –ø—Ä–∏–º–µ—Ä–Ω–æ 30% —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Ç—è–≥–∏ (—Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º —Ä–∞–∑–±—Ä–æ—Å–æ–º),
	// –¥–ª—è —Å–æ—Å–µ–¥–Ω–µ–≥–æ ‚Äì –æ–∫–æ–ª–æ 15% —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–π —Ç—è–≥–∏.
	baseCompensationOpposite := 0.3
	baseCompensationNeighbor := 0.15

	for i := range engines {
		// –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏, –∫—Ä–æ–º–µ –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ
		if engines[i].Running && i != failedIdx {
			if isOpposite(engines[i], failedEngine) {
				// –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ—Ä—é –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ —Ç—è–≥–∏
				// –°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±0.05
				adjustmentFactor := baseCompensationOpposite + (rand.Float64()*0.1 - 0.05)
				delta := failedEngine.Thrust * adjustmentFactor

				// –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤–∞—è —Ç—è–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª—è
				if engines[i].Thrust+delta > engines[i].MaxThrust {
					delta = engines[i].MaxThrust - engines[i].Thrust
				}
				engines[i].Thrust += delta
				fmt.Printf("‚ö†Ô∏è Engine %d thrust increased by %.2f N (total: %.2f N) for balance\n", i+1, delta, engines[i].Thrust)
			} else if isNeighbor(engines[i], failedEngine) {
				// –°–æ—Å–µ–¥–Ω–∏–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Ç—è–≥—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –∫—Ä—É—Ç—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
				adjustmentFactor := baseCompensationNeighbor + (rand.Float64()*0.05 - 0.025)
				delta := failedEngine.Thrust * adjustmentFactor

				// –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤–∞—è —Ç—è–≥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—á–µ–π —Ç—è–≥–∏
				if engines[i].Thrust-delta < engines[i].MinThrust {
					delta = engines[i].Thrust - engines[i].MinThrust
				}
				engines[i].Thrust -= delta
				fmt.Printf("‚ö†Ô∏è Engine %d thrust decreased by %.2f N (total: %.2f N) for balance\n", i+1, delta, engines[i].Thrust)
			}
		}
	}
}

func randomThrustAdjustment(min, max float64) float64 {
	value := min + rng.Float64()*(max-min)
	if rng.Intn(2) == 0 {
		return -value
	}
	return value
}

// angleBetweenEngines –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –º–µ–∂–¥—É –¥–≤—É–º—è –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏
func angleBetweenEngines(e1, e2 Engine) float64 {
	return math.Atan2(e2.Y-e1.Y, e2.X-e1.X) * (180 / math.Pi)
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º (—É–≥–æ–ª –±–ª–∏–∑–æ–∫ –∫ 180¬∞)
func isOpposite(e1, e2 Engine) bool {
	angle := math.Abs(angleBetweenEngines(e1, e2))
	return angle > 150 && angle <= 210
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å —Å–æ—Å–µ–¥–Ω–∏–º (—É–≥–æ–ª –º–∞–ª—ã–π, <90¬∞)
func isNeighbor(e1, e2 Engine) bool {
	angle := math.Abs(angleBetweenEngines(e1, e2))
	return angle <= 90
}
