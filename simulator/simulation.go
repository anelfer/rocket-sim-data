package simulator

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"sync"
	"time"

	"rocketTelemetrySim/metrics"
)

var CurrentSimulation *Simulation

func SetCurrentSimulation(sim *Simulation) {
	CurrentSimulation = sim
}

type Simulation struct {
	Engines            []Engine
	DryMass            float64
	TotalMass          float64
	FuelMass           float64
	FuelBurnRate       float64
	Velocity           float64
	Altitude           float64
	Gravity            float64
	Area               float64
	DragCoefficient    float64
	AirDensitySeaLevel float64

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ø–ª–æ–≤–æ–π –º–æ–¥–µ–ª–∏
	AmbientTemp         float64 // ¬∞C, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã
	Cp                  float64 // —É–¥–µ–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ—ë–º–∫–æ—Å—Ç—å, J/(kg*K)
	MChamber            float64 // —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–∞—Å—Å–∞ –≥–∞–∑–æ–≤–æ–π —Å–º–µ—Å–∏ –≤ –∫–∞–º–µ—Ä–µ, –∫–≥
	QFactor             float64 // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç—è–≥–∏ –≤ —Ç–µ–ø–ª–æ–≤–æ–π –ø–æ—Ç–æ–∫, J/(N*s)
	CoolingCoeff        float64 // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è, W/¬∞C
	CoolingTimeConstant float64 // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è, —Å–µ–∫.
	Dt                  float64 // —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏, —Å–µ–∫.

	rng *rand.Rand
	mu  sync.RWMutex
}

func NewSimulation() *Simulation {
	s := &Simulation{
		Engines:            initEngines(9, 975000, 1.83, 25.0),
		DryMass:            25600.0,
		TotalMass:          549054.0,
		FuelBurnRate:       400.0,
		Velocity:           0.0,
		Altitude:           0.0,
		Gravity:            9.81,
		DragCoefficient:    0.5,
		AirDensitySeaLevel: 1.225,

		AmbientTemp:         25.0,
		Cp:                  1200.0, // J/(kg¬∑K)
		MChamber:            10.0,   // –∫–≥ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å 1 –¥–æ 10 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ç–µ–ø–ª–æ–≤–æ–≥–æ –∏–Ω–µ—Ä—Ü–∏—Ä–æ–≤–∞–Ω–∏—è)
		QFactor:             23.5,   // J/(N¬∑s)
		CoolingCoeff:        6250.0, // W/¬∞C
		CoolingTimeConstant: 1.0,    // —Å–µ–∫
		Dt:                  1.0,    // —Å–µ–∫

		rng: rand.New(rand.NewSource(time.Now().UnixNano())),
	}
	s.FuelMass = s.TotalMass - s.DryMass
	s.Area = math.Pi * math.Pow(1.83, 2)
	return s
}

func (s *Simulation) Reset() {
	if CurrentSimulation == nil {
		return
	}
	s.mu.Lock()
	defer s.mu.Unlock()
	s.Engines = initEngines(9, 975000, 1.83, 25.0)
	s.DryMass = 25600.0
	s.TotalMass = 549054.0
	s.FuelMass = s.TotalMass - s.DryMass
	s.FuelBurnRate = 295.0
	s.Velocity = 0.0
	s.Altitude = 0.0
	s.Gravity = 9.81
	s.Area = math.Pi * math.Pow(1.83, 2)
	s.DragCoefficient = 0.5
	s.AirDensitySeaLevel = 1.225
}

func (s *Simulation) Run() {
	s.mu.Lock()
	lowFuelThreshold := 1500.0
	s.mu.Unlock()

	for s.Altitude >= 0 {
		s.mu.Lock()

		effectiveAmbientTemp := calcEffectiveAmbientTemp(s.Altitude, s.AmbientTemp)

		// –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –Ω–µ—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏
		if s.FuelMass <= 0 {
			s.FuelMass = 0
			for i := range s.Engines {
				if s.Engines[i].Running {
					s.Engines[i].Running = false
					log.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á—ë–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", i+1, s.Altitude)
					balanceEngines(s.Engines, i, s.rng)
				}
			}
		}

		// –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –º–∞–ª–æ, —Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
		if s.FuelMass > 0 && s.FuelMass < lowFuelThreshold {
			for idx, engine := range s.Engines {
				if engine.Running {
					chance := s.rng.Float64()
					if chance < 0.2 {
						s.Engines[idx].Running = false
						log.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –≤—ã—à–µ–ª –∏–∑ —Å—Ç—Ä–æ—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", idx+1, s.Altitude)
						balanceEngines(s.Engines, idx, s.rng)
					} else if chance < 0.3 {
						surgeFactor := 1.5
						s.Engines[idx].Thrust *= surgeFactor
						log.Printf("‚ö° –î–≤–∏–≥–∞—Ç–µ–ª—å %d –∏—Å–ø—ã—Ç–∞–ª —Ä–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ —Ç—è–≥–∏, –Ω–æ–≤–∞—è —Ç—è–≥–∞: %.2f\n", idx+1, s.Engines[idx].Thrust)
					} else if chance < 0.4 {
						reductionFactor := 0.5
						s.Engines[idx].Thrust *= reductionFactor
						log.Printf("‚ö†Ô∏è –î–≤–∏–≥–∞—Ç–µ–ª—å %d –∏—Å–ø—ã—Ç–∞–ª —Ä–µ–∑–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç—è–≥–∏, –Ω–æ–≤–∞—è —Ç—è–≥–∞: %.2f\n", idx+1, s.Engines[idx].Thrust)
					}
				}
			}
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞–∫–µ—Ç—ã
		thrust := totalThrust(s.Engines)
		airDensity := s.AirDensitySeaLevel * math.Exp(-s.Altitude/8500)
		drag := 0.5 * s.DragCoefficient * airDensity * s.Velocity * s.Velocity * s.Area
		currentMass := s.DryMass + s.FuelMass
		acceleration := (thrust - currentMass*s.Gravity - drag) / currentMass
		s.Velocity += acceleration
		s.Altitude += s.Velocity

		// –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
		running := runningEngines(s.Engines)
		fuelConsumed := s.FuelBurnRate * float64(running)
		if s.FuelMass-fuelConsumed < 0 {
			fuelConsumed = s.FuelMass
		}
		s.FuelMass -= fuelConsumed

		// –°–ª—É—á–∞–π–Ω—ã–µ –∞–≤–∞—Ä–∏–∏
		if s.rng.Float64() < 0.00015 && runningEngines(s.Engines) >= 7 {
			randomIndex := s.rng.Intn(len(s.Engines))
			s.Engines[randomIndex].Running = false
			log.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∞–≤–∞—Ä–∏–∏ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", randomIndex+1, s.Altitude)
			balanceEngines(s.Engines, randomIndex, s.rng)
		}

		for i := range s.Engines {
			s.Engines[i].UpdateThermalState(s.Dt, effectiveAmbientTemp, s.Cp, s.MChamber, s.QFactor, s.CoolingCoeff, s.CoolingTimeConstant, airDensity, s.Velocity, 0.5)
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫
		metrics.SendBasicMetrics(s.Altitude, s.Velocity, acceleration, currentMass, drag, airDensity, running, effectiveAmbientTemp)
		for idx, engine := range s.Engines {
			engineID := fmt.Sprintf("%d", idx+1)
			if engine.Running {
				metrics.SetEngineThrust(engineID, engine.Thrust, engine.ChamberTemp, engine.NozzleTemp, engine.WallTemp, engine.TurbineTemp)
			} else {
				metrics.SetEngineThrust(engineID, 0, engine.ChamberTemp, engine.NozzleTemp, engine.WallTemp, engine.TurbineTemp)
			}
		}
		s.mu.Unlock()

		time.Sleep(1 * time.Second)
	}
}

// calcEffectiveAmbientTemp —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã (–≤ ¬∞C)
// –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã—Å–æ—Ç—ã (–≤ –º–µ—Ç—Ä–∞—Ö) –∏ –±–∞–∑–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è (seaLevelTemp).
// –ú–æ–¥–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–∏:
//   - 0‚Äì11 –∫–º (—Ç—Ä–æ–ø–æ—Å—Ñ–µ—Ä–∞): —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–∞–¥–∞–µ—Ç –ª–∏–Ω–µ–π–Ω–æ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 6.5¬∞C/–∫–º.
//   - 11‚Äì20 –∫–º (–Ω–∏–∂–Ω—è—è —Å—Ç—Ä–∞—Ç–æ—Å—Ñ–µ—Ä–∞): —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 11 –∫–º).
//   - 20‚Äì47 –∫–º (–º–µ–∑–æ—Å—Ñ–µ—Ä–∞): —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–∞–¥–∞–µ—Ç –ª–∏–Ω–µ–π–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 30¬∞C –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ 20 –∫–º –¥–æ 47 –∫–º.
//   - 47‚Äì50 –∫–º (–ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π —Å–ª–æ–π): —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞—Å—Ç—ë—Ç –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ 47 –∫–º –¥–æ -60¬∞C –Ω–∞ 50 –∫–º.
//   - 50‚Äì100 –∫–º (–Ω–∏–∂–Ω—è—è —Ç–µ—Ä–º–æ—Å—Ñ–µ—Ä–∞): –ª–∏–Ω–µ–π–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ç -60¬∞C (–Ω–∞ 50 –∫–º) –¥–æ 100¬∞C (–Ω–∞ 100 –∫–º).
//   - 100‚Äì1000 –∫–º (—Ç–µ—Ä–º–æ—Å—Ñ–µ—Ä–∞): —Ä–µ–∑–∫–∏–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 100¬∞C (–Ω–∞ 100 –∫–º)
//     –¥–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 1500¬∞C (–Ω–∞ 1000 –∫–º).
//   - 1000‚Äì1500 –∫–º: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ª–∏–Ω–µ–π–Ω–æ –æ—Ç ~1500¬∞C (–Ω–∞ 1000 –∫–º) –¥–æ 100¬∞C (–Ω–∞ 1500 –∫–º).
//   - 1500‚Äì10000 –∫–º: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–≤–Ω–æ –ø–∞–¥–∞–µ—Ç –æ—Ç 100¬∞C –¥–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –Ω—É–ª—è (-273.15¬∞C).
//   - –í—ã—à–µ 10000 –∫–º: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ -273.15¬∞C.
//
// –ü—Ä–∏ —ç—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∏–∂–µ ‚Äì273.15¬∞C.
func calcEffectiveAmbientTemp(altitude, seaLevelTemp float64) float64 {
	var t float64
	if altitude < 11000 {
		t = seaLevelTemp - 6.5*(altitude/1000.0)
	} else if altitude < 20000 {
		t = seaLevelTemp - 6.5*11.0
	} else if altitude < 47000 {
		T20 := seaLevelTemp - 6.5*11.0
		t = T20 - ((altitude-20000)/(47000-20000))*30.0
	} else if altitude < 50000 {
		T20 := seaLevelTemp - 6.5*11.0
		t47 := T20 - 30.0
		t = t47 + ((altitude-47000)/(50000-47000))*((-60.0)-t47)
	} else if altitude < 100000 {
		t = -60.0 + ((altitude-50000)/(100000-50000))*(100.0-(-60.0))
	} else if altitude < 1000000 {
		ratio := (altitude - 100000) / (1000000 - 100000)
		t = 100.0 * math.Exp(2.708*ratio)
	} else if altitude < 1500000 {
		ratio := (altitude - 1000000) / (1500000 - 1000000)
		t = 1500.0 - ratio*(1500.0-100.0)
	} else if altitude < 10000000 {
		ratio := (altitude - 1500000) / (10000000 - 1500000)
		t = 100.0 - ratio*(100.0-(-273.15))
	} else {
		t = -273.15
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —à—É–º: –∞–º–ø–ª–∏—Ç—É–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—ã—Å–æ—Ç
	var noiseAmp float64
	switch {
	case altitude < 20000:
		noiseAmp = 1.0
	case altitude < 50000:
		noiseAmp = 0.5
	case altitude < 100000:
		noiseAmp = 0.5
	case altitude < 1000000:
		noiseAmp = 1.0
	case altitude < 1500000:
		noiseAmp = 1.0
	case altitude < 10000000:
		noiseAmp = 2.0
	default:
		noiseAmp = 0.0
	}
	t += rand.NormFloat64() * noiseAmp
	if t < -273.15 {
		t = -273.15
	}
	return t
}
