package simulator

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"rocketTelemetrySim/simulator/orbit"
	"rocketTelemetrySim/utils"
	"sync"
	"time"

	"rocketTelemetrySim/metrics"
)

var CurrentSimulation *Simulation
var Lat = 45.9647
var Lon = 63.3050
var Heading = 90.0 // –≤–æ—Å—Ç–æ–∫

func SetCurrentSimulation(sim *Simulation) {
	CurrentSimulation = sim
}

type Simulation struct {
	Engines            []Engine
	DryMass            float64
	TotalMass          float64
	FuelMass           float64
	VerticalVelocity   float64
	HorizontalVelocity float64
	Altitude           float64
	Gravity            float64
	Area               float64
	DragCoefficient    float64
	AirDensitySeaLevel float64

	LastDrag            float64
	LastAccelVertical   float64
	LastAccelHorizontal float64

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ø–ª–æ–≤–æ–π –º–æ–¥–µ–ª–∏
	AmbientTemp         float64 // ¬∞C, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã
	Cp                  float64 // —É–¥–µ–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ—ë–º–∫–æ—Å—Ç—å, J/(kg*K)
	MChamber            float64 // —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–∞—Å—Å–∞ –≥–∞–∑–æ–≤–æ–π —Å–º–µ—Å–∏ –≤ –∫–∞–º–µ—Ä–µ, –∫–≥
	QFactor             float64 // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç—è–≥–∏ –≤ —Ç–µ–ø–ª–æ–≤–æ–π –ø–æ—Ç–æ–∫, J/(N*s)
	CoolingCoeff        float64 // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è, W/¬∞C
	CoolingTimeConstant float64 // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è, —Å–µ–∫.
	Dt                  float64 // —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏, —Å–µ–∫.

	Lat     float64
	Lon     float64
	Heading float64

	rng *rand.Rand
	mu  sync.RWMutex
}

func NewSimulation() *Simulation {
	s := &Simulation{
		Engines:            initEngines(9, 975000, 1.83, 25.0),
		DryMass:            25600.0,
		TotalMass:          549054.0,
		VerticalVelocity:   0.0,
		HorizontalVelocity: orbit.EarthRotationSpeedAtLatitude(45.9647),
		Altitude:           0.0,
		Gravity:            calcGravityAtAltitude(0),
		DragCoefficient:    0.5,
		AirDensitySeaLevel: 1.225,

		AmbientTemp:         25.0,
		Cp:                  1200.0, // J/(kg¬∑K)
		MChamber:            10.0,   // –∫–≥ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Å 1 –¥–æ 10 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ç–µ–ø–ª–æ–≤–æ–≥–æ –∏–Ω–µ—Ä—Ü–∏—Ä–æ–≤–∞–Ω–∏—è)
		QFactor:             23.5,   // J/(N¬∑s)
		CoolingCoeff:        6250.0, // W/¬∞C
		CoolingTimeConstant: 1.0,    // —Å–µ–∫
		Dt:                  1.0,    // —Å–µ–∫

		Lat:     45.9647,
		Lon:     63.3050,
		Heading: 90,

		rng: rand.New(rand.NewSource(time.Now().UnixNano())),
	}
	s.FuelMass = s.TotalMass - s.DryMass
	s.Area = math.Pi * math.Pow(1.83, 2)
	return s
}

func (s *Simulation) Reset() {
	if CurrentSimulation == nil {
		return
	}
	s.mu.Lock()
	defer s.mu.Unlock()
	s.Engines = initEngines(9, 975000, 1.83, 25.0)
	s.DryMass = 25600.0
	s.TotalMass = 549054.0
	s.FuelMass = s.TotalMass - s.DryMass
	s.VerticalVelocity = 0.0
	s.HorizontalVelocity = orbit.EarthRotationSpeedAtLatitude(0)
	s.Altitude = 0.0
	s.Gravity = calcGravityAtAltitude(0)
	s.Area = math.Pi * math.Pow(1.83, 2)
	s.DragCoefficient = 0.5
	s.AirDensitySeaLevel = 1.225
}

func (s *Simulation) Run() {
	s.mu.Lock()
	lowFuelThreshold := 1500.0
	deltaT := 1.0
	stagesSeparated := false
	noseFairingDestack := false
	timeV := 0.0
	s.mu.Unlock()

	for i, engine := range s.Engines {
		if engine.Running {
			engine.Thrust = 845000
			s.Engines[i] = engine
		}
	}

	for {
		s.mu.Lock()

		effectiveAmbientTemp := calcEffectiveAmbientTemp(s.Altitude, s.AmbientTemp)

		// –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –Ω–µ—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏
		if s.FuelMass <= 0 {
			s.FuelMass = 0
			for i := range s.Engines {
				if s.Engines[i].Running {
					s.Engines[i].Running = false
					log.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á—ë–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", i+1, s.Altitude)
					balanceEngines(s.Engines, i, s.rng)
				}
			}
		}

		// –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–∞ –º–∞–ª–æ, —Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
		if s.FuelMass > 0 && s.FuelMass < lowFuelThreshold {
			for idx, engine := range s.Engines {
				if engine.Running {
					chance := s.rng.Float64()
					if chance < 0.2 {
						s.Engines[idx].Running = false
						log.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –≤—ã—à–µ–ª –∏–∑ —Å—Ç—Ä–æ—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", idx+1, s.Altitude)
						balanceEngines(s.Engines, idx, s.rng)
					} else if chance < 0.3 {
						surgeFactor := 1.5
						s.Engines[idx].Thrust *= surgeFactor
						log.Printf("‚ö° –î–≤–∏–≥–∞—Ç–µ–ª—å %d –∏—Å–ø—ã—Ç–∞–ª —Ä–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫ —Ç—è–≥–∏, –Ω–æ–≤–∞—è —Ç—è–≥–∞: %.2f\n", idx+1, s.Engines[idx].Thrust)
					} else if chance < 0.4 {
						reductionFactor := 0.5
						s.Engines[idx].Thrust *= reductionFactor
						log.Printf("‚ö†Ô∏è –î–≤–∏–≥–∞—Ç–µ–ª—å %d –∏—Å–ø—ã—Ç–∞–ª —Ä–µ–∑–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç—è–≥–∏, –Ω–æ–≤–∞—è —Ç—è–≥–∞: %.2f\n", idx+1, s.Engines[idx].Thrust)
					}
				}
			}
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—Å—É –∏ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
		thrust := TotalThrust(s.Engines)

		currentMass := s.DryMass + s.FuelMass
		// 1. –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –Ω–∞ —Ç–µ–∫—É—â–µ–π –≤—ã—Å–æ—Ç–µ
		rawGravity := calcGravityAtAltitude(s.Altitude)

		// 2. –¶–µ–Ω—Ç—Ä–æ—Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)
		radius := orbit.EarthRadius + s.Altitude
		centripetalAccel := (s.HorizontalVelocity * s.HorizontalVelocity) / radius

		// 3. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è: "—á–∏—Å—Ç–∞—è" —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä—É—é –µ—â—ë –Ω–∞–¥–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å
		effectiveGravity := rawGravity - centripetalAccel

		// 4. –û–±–Ω—É–ª–∏–º –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö (–∏–Ω–∞—á–µ —Ä–∞–∫–µ—Ç–∞ "–≤—ã–ª–µ—Ç–∏—Ç –≤ –∫–æ—Å–º–æ—Å")
		if effectiveGravity < 0 {
			effectiveGravity = 0
		}

		// 5. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ —Å–∏–º—É–ª—è—Ü–∏—é –∏ —Å—á–∏—Ç–∞–µ–º —Å–∏–ª—É —Ç—è–∂–µ—Å—Ç–∏
		s.Gravity = effectiveGravity
		gravityForce := currentMass * s.Gravity

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π pitch
		pitch := orbit.ComputePitchSmart(s.Altitude, s.VerticalVelocity, s.HorizontalVelocity, s.LastAccelVertical, s.LastAccelHorizontal, orbit.OrbitLEO) //s.VerticalVelocity
		pitchRad := pitch * math.Pi / 180

		// 5. –†–∞–∑–ª–æ–∂–∏–º —Ç—è–≥—É –ø–æ –æ—Å—è–º
		thrustX := thrust * math.Cos(pitchRad)
		thrustY := thrust * math.Sin(pitchRad)

		// 6. –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞
		airDensity := CalcAirDensityUSSA(s.Altitude)
		totalVelocity := math.Hypot(s.HorizontalVelocity, s.VerticalVelocity)
		totalvelocityRel := math.Hypot(s.HorizontalVelocity-orbit.EarthRotationSpeedAtLatitude(s.Lat), s.VerticalVelocity)
		cD := utils.CdByVelocity(totalvelocityRel, CalcEffectiveAmbientTemp(s.Altitude))

		targetDrag := 0.5 * cD * airDensity * totalvelocityRel * totalvelocityRel * s.Area
		s.LastDrag += (targetDrag - s.LastDrag) * 1
		drag := s.LastDrag

		// 7. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ drag ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ –≤–µ–∫—Ç–æ—Ä—É —Å–∫–æ—Ä–æ—Å—Ç–∏
		var unitX, unitY float64
		if totalVelocity > 0 {
			unitX = s.HorizontalVelocity / totalVelocity
			unitY = s.VerticalVelocity / totalVelocity
		}
		dragX := -drag * unitX
		dragY := -drag * unitY

		// 8. –°—É–º–º–∞—Ä–Ω—ã–µ —Å–∏–ª—ã
		forceX := thrustX + dragX
		forceY := thrustY + dragY - gravityForce

		// 9. –£—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ –æ—Å—è–º (—Å—ã—Ä—ã–µ)
		rawAccelHorizontal := forceX / currentMass
		rawAccelVertical := forceY / currentMass

		accelVertical := rawAccelVertical
		accelHorizontal := rawAccelHorizontal

		s.LastAccelVertical = accelVertical
		s.LastAccelHorizontal = accelHorizontal

		// 10. –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
		s.VerticalVelocity += accelVertical * deltaT
		s.HorizontalVelocity += accelHorizontal * deltaT

		// 11. –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É
		s.Altitude += s.VerticalVelocity * deltaT
		if s.Altitude < 0 {
			s.Altitude = 0
			s.VerticalVelocity = 0
			for i := range s.Engines {
				s.Engines[i].Running = false
			}
		}

		newThrottle := orbit.ComputeThrottle(s.HorizontalVelocity, s.LastAccelHorizontal, s.VerticalVelocity, s.LastAccelVertical, s.Altitude, pitch, utils.CalculateTWR(thrust, s.TotalMass, s.Gravity), 7670.0, 1)
		orbit.CurrentThrottle = newThrottle
		for i, engine := range s.Engines {
			if engine.Running {
				// –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É MinThrust –∏ MaxThrust –ø–æ throttle
				thrustNew := engine.MinThrust + newThrottle*(engine.MaxThrust-engine.MinThrust)

				// –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ
				s.Engines[i].Thrust = math.Max(engine.MinThrust, math.Min(thrustNew, engine.MaxThrust))
			}
		}

		//if ShouldSECO(s.Altitude, s.VerticalVelocity, s.HorizontalVelocity) {
		//	for i, engine := range s.Engines {
		//		if engine.Running {
		//			s.Engines[i].Running = false
		//		}
		//	} // SECO
		//}

		s.Lat, s.Lon = orbit.GuidanceUpdatePosition(s.Lat, s.Lon, math.Hypot(s.HorizontalVelocity, s.VerticalVelocity), pitch, s.Heading)

		thrustPerEngine := AdjustThrustByAltitude(s.Altitude)
		for i, engine := range s.Engines {
			if engine.Running && !stagesSeparated {
				engine.Thrust = thrustPerEngine
				s.Engines[i] = engine
			}
		}

		//fmt.Printf("alt=%.0f pitch=%.1f vx=%.1f vy=%.1f aX=%.2f aY=%.2f\n",
		//	s.Altitude, pitch, s.HorizontalVelocity, s.VerticalVelocity,
		//	accelHorizontal, accelVertical)

		//stage separation
		if timeV+1 >= 180 && !stagesSeparated {
			stagesSeparated = true
			s.DryMass = 7300
			s.FuelMass = 107670
			s.TotalMass = s.DryMass + s.FuelMass
			enabled := false

			for i := range s.Engines {
				if s.Engines[i].Running {
					if !enabled {
						// –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∫–ª—é—á—ë–Ω–Ω—ã–º –∏ –∑–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
						s.Engines[i].ISP = 348
						s.Engines[i].Thrust = 981000
						s.Engines[i].MaxThrust = 981000 + 500
						enabled = true
					} else {
						// –í—ã–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ
						s.Engines[i].Running = false
					}
				}
			}

			// –ï—Å–ª–∏ –≤—Å–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–¥–∏–Ω –∏ –∑–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
			if !enabled && len(s.Engines) > 0 {
				s.Engines[0].Running = true
				s.Engines[0].ISP = 348
				s.Engines[0].Thrust = 981000
				s.Engines[0].MaxThrust = 981000 + 500
			}
			fmt.Println("Rocket stage was separated!")
		}

		if timeV+1 >= 195 && !noseFairingDestack {
			noseFairingDestack = true
			s.DryMass = s.DryMass - 1750
			fmt.Println("Nose fairing was destacked!")
		}

		// –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
		var totalFuelUsed float64
		for i, engine := range s.Engines {
			engine.ISP = calculateISP(s.Altitude)
			s.Engines[i] = engine
			if engine.Running {
				massFlow := calculateMassFlow(engine, s.Gravity) // –∫–≥/—Å
				totalFuelUsed += massFlow
			}
		}
		if s.FuelMass < totalFuelUsed {
			totalFuelUsed = s.FuelMass
		}
		s.FuelMass -= totalFuelUsed

		running := runningEngines(s.Engines)
		// –°–ª—É—á–∞–π–Ω—ã–µ –∞–≤–∞—Ä–∏–∏
		if s.rng.Float64() < 0.00015 && runningEngines(s.Engines) >= 7 && !stagesSeparated {
			randomIndex := s.rng.Intn(len(s.Engines))
			s.Engines[randomIndex].Running = false
			log.Printf("üö® –î–≤–∏–≥–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∞–≤–∞—Ä–∏–∏ –Ω–∞ –≤—ã—Å–æ—Ç–µ %.2f –º\n", randomIndex+1, s.Altitude)
			balanceEngines(s.Engines, randomIndex, s.rng)
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫
		metrics.SendBasicMetrics(s.Altitude, s.VerticalVelocity, s.HorizontalVelocity, accelHorizontal, accelVertical, currentMass, drag, airDensity, running, effectiveAmbientTemp, pitch, s.Gravity, TotalThrust(s.Engines), timeV, s.Lat, s.Lon)
		for idx, engine := range s.Engines {
			s.Engines[idx].UpdateThermalState(s.Dt, effectiveAmbientTemp, s.Cp, s.MChamber, s.QFactor, s.CoolingCoeff, s.CoolingTimeConstant, airDensity, totalVelocity, 0.5)
			engineID := fmt.Sprintf("%d", idx+1)
			if engine.Running {
				metrics.SetEngineThrust(engineID, engine.Thrust, engine.ISP, engine.ChamberTemp, engine.NozzleTemp, engine.WallTemp, engine.TurbineTemp)
			} else {
				metrics.SetEngineThrust(engineID, 0, engine.ISP, engine.ChamberTemp, engine.NozzleTemp, engine.WallTemp, engine.TurbineTemp)
			}
		}
		timeV++
		s.mu.Unlock()

		time.Sleep(1 * time.Second)
	}
}

// calcEffectiveAmbientTemp —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã (–≤ ¬∞C)
// –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è USSA-76
func calcEffectiveAmbientTemp(altitude, seaLevelTemp float64) float64 {
	t := utils.KelvinToCelsius(CalcEffectiveAmbientTemp(altitude))

	// –î–æ–±–∞–≤–ª—è–µ–º —à—É–º: –∞–º–ø–ª–∏—Ç—É–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—ã—Å–æ—Ç
	var noiseAmp float64
	switch {
	case altitude < 20000:
		noiseAmp = 1.0
	case altitude < 50000:
		noiseAmp = 0.5
	case altitude < 100000:
		noiseAmp = 0.5
	case altitude < 1000000:
		noiseAmp = 1.0
	case altitude < 1500000:
		noiseAmp = 1.0
	case altitude < 10000000:
		noiseAmp = 2.0
	default:
		noiseAmp = 0.0
	}
	t += rand.NormFloat64() * noiseAmp
	if t < -273.15 {
		t = -273.15
	}
	return t
}

func calcGravityAtAltitude(altitude float64) float64 {
	const (
		g0 = 9.80665   // –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è (–º/—Å¬≤)
		R  = 6371000.0 // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
	)

	return g0 * (R / (R + altitude)) * (R / (R + altitude))
}

// –¢–∞–±–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ USSA-76 (–≤—ã—Å–æ—Ç–∞ –≤ –º, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ –∫–≥/–º¬≥)
var altitudeTable = []float64{
	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000,
	10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000,
	20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000,
	30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000,
}

var temperatureTable = []float64{
	288.15, 281.65, 275.15, 268.65, 262.15, 255.65, 249.15, 242.65, 236.15, 229.65,
	223.15, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65,
	216.65, 218.65, 220.65, 222.65, 224.65, 226.65, 228.65, 230.65, 232.65, 234.65,
	236.65, 250.35, 270.65, 247.02, 219.65, 199.15, 186.87, 195.08,
}

var densityTable = []float64{
	1.225, 1.112, 1.007, 0.9093, 0.8194, 0.7364, 0.6601, 0.59, 0.5258, 0.4671,
	0.4135, 0.3648, 0.3108, 0.2731, 0.2385, 0.2067, 0.1775, 0.1507, 0.1262, 0.1038,
	0.08891, 0.07569, 0.06407, 0.05398, 0.04533, 0.03806, 0.03209, 0.02728, 0.02303, 0.01918,
	0.01569, 0.003996, 0.001027, 0.0003097, 0.0000828, 0.0000185, 0.0000038, 0.00000079,
}

// –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
func linearInterpolate(x float64, xTable, yTable []float64) float64 {
	n := len(xTable)
	var result float64

	if x <= xTable[0] {
		result = yTable[0]
	} else if x >= xTable[n-1] {
		// –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ—Ç—Ä–µ–∑–∫—É
		dx := xTable[n-1] - xTable[n-2]
		dy := yTable[n-1] - yTable[n-2]
		slope := dy / dx
		result = yTable[n-1] + slope*(x-xTable[n-1])
	} else {
		for i := 1; i < n; i++ {
			if x < xTable[i] {
				x0, x1 := xTable[i-1], xTable[i]
				y0, y1 := yTable[i-1], yTable[i]
				t := (x - x0) / (x1 - x0)
				result = y0 + t*(y1-y0)
				break
			}
		}
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	return math.Max(0, result)
}

// CalcEffectiveAmbientTemp –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–µ (–º)
func CalcEffectiveAmbientTemp(altitude float64) float64 {
	return linearInterpolate(altitude, altitudeTable, temperatureTable)
}

// CalcAirDensityUSSA –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –∫–≥/–º¬≥ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–µ (–º)
func CalcAirDensityUSSA(altitude float64) float64 {
	return linearInterpolate(altitude, altitudeTable, densityTable)
}

// DragForce —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–≤ –Ω—å—é—Ç–æ–Ω–∞—Ö)
func DragForce(altitude, velocity, area float64) float64 {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
	tempK := CalcEffectiveAmbientTemp(altitude)

	// –°–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞ (–º/—Å)
	a := utils.SpeedOfSound(tempK)

	// –ß–∏—Å–ª–æ –ú–∞—Ö–∞
	mach := velocity / a

	// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ –ú–∞—Ö–∞
	Cd := utils.CdByMach(mach)

	// –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (–∫–≥/–º¬≥)
	rho := CalcAirDensityUSSA(altitude)

	// –§–æ—Ä–º—É–ª–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
	return 0.5 * Cd * rho * velocity * velocity * area
}

func calculateMassFlow(engine Engine, gravity float64) float64 {
	if !engine.Running || engine.ISP <= 0 {
		return 0
	}
	return engine.Thrust / (engine.ISP * gravity)
}

func calculateISP(altitude float64) float64 {
	const ISP_sea = 282.0 // –¥–ª—è Merlin Vacuum –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
	const ISP_vac = 311.0 // –≤ –≤–∞–∫—É—É–º–µ
	const h_max = 77000.0 // –ø–æ—Å–ª–µ —ç—Ç–æ–π –≤—ã—Å–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º ISP = ISP_vac

	// clamp –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
	ratio := altitude / h_max
	if ratio > 1 {
		ratio = 1
	} else if ratio < 0 {
		ratio = 0
	}

	return ISP_sea + (ISP_vac-ISP_sea)*ratio
}

// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç maxJerk –≤ –º/—Å¬≥
func CalculateMaxJerk(thrust float64, mass float64, altitude float64) float64 {
	// 1. –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
	airDensity := CalcAirDensityUSSA(altitude)

	// 2. –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—è–≥–æ–π
	// –ß–µ–º –±–æ–ª—å—à–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å ‚Äî —Ç–µ–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ —Ä–µ–∞–∫—Ü–∏—è
	tau := 0.2 + 5.0*(airDensity/1.225) // –æ—Ç ~0.2—Å –≤ –≤–∞–∫—É—É–º–µ –¥–æ ~5.2—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è

	// 3. –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π jerk
	maxJerk := thrust / (mass * tau)

	return maxJerk
}

func limitAcceleration(prevAccel, targetAccel, deltaT, maxJerk float64) float64 {
	deltaA := targetAccel - prevAccel
	maxDeltaA := maxJerk * deltaT

	if deltaA > maxDeltaA {
		return prevAccel + maxDeltaA
	} else if deltaA < -maxDeltaA {
		return prevAccel - maxDeltaA
	}
	return targetAccel
}

func getAccelResponseFactor(mass, area, Cd, altitude, throttleResponse, deltaT float64) float64 {
	// 1. –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞
	rho := CalcAirDensityUSSA(altitude) // –∫–≥/–º¬≥

	// 2. –ê—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ
	// F_drag ‚âà 0.5 * rho * V¬≤ * Cd * A
	// œÑ_–∞—ç—Ä–æ ~ –º–∞—Å—Å–∞ / (0.5 * rho * Cd * A)
	// –ø—É—Å—Ç—å V = 1 –º/—Å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–º—ã —Ö–æ—Ç–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)
	tauAero := mass / (0.5*rho*Cd*area + 1e-5) // +Œµ —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ 0

	// 3. –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–µ–∫)
	tauEngine := throttleResponse // –æ–±—ã—á–Ω–æ 0.1‚Äì0.5 —Å–µ–∫

	// 4. –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞) ‚Äî —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏
	tauStruct := 0.05 // –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º

	// 5. –ò—Ç–æ–≥–æ–≤–∞—è tau ‚Äî —Ä–µ–∞–∫—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
	tau := tauAero + tauEngine + tauStruct

	// 6. alpha = Œît / œÑ
	alpha := deltaT / tau

	// –û–≥—Ä–∞–Ω–∏—á–∏–º alpha
	if alpha > 0.25 {
		alpha = 0.25
	}
	if alpha < 0.005 {
		alpha = 0.005
	}
	return alpha
}

func AdjustThrustByAltitude(alt float64) float64 {
	const seaLevelThrust = 845000.0
	const vacuumThrust = 975000.0
	const maxBoostAltitude = 50000.0 // –¥–æ —ç—Ç–æ–π –≤—ã—Å–æ—Ç—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º

	if alt >= maxBoostAltitude {
		return vacuumThrust
	}

	t := alt / maxBoostAltitude
	eased := 0.5 * (1 - math.Cos(t*math.Pi)) // –æ—Ç 0 –¥–æ 1
	return seaLevelThrust + eased*(vacuumThrust-seaLevelThrust)
}

func ShouldSECO(altitude, vVertical, vHorizontal float64) bool {
	targetAltitude := 400_000.0 // –º
	requiredVelocity := 7670.0  // –º/—Å

	return altitude >= targetAltitude-5000 && // 5 –∫–º –¥–æ–ø—É—Å–∫–∞
		altitude <= targetAltitude+5000 &&
		vHorizontal >= requiredVelocity &&
		math.Abs(vVertical) < 50 // –ø–æ—á—Ç–∏ 0
}
